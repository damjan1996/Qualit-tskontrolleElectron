# .github/workflows/test.yml
name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_ENV: test
  FORCE_COLOR: 1
  MSSQL_SERVER: localhost
  MSSQL_DATABASE: RdScanner_Test
  MSSQL_USER: test_user
  MSSQL_PASSWORD: test_password

jobs:
  # ===== VALIDATION JOB =====
  validate:
    name: Validate Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate test environment
        run: node scripts/test-runner.js validate

      - name: Lint code
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

  # ===== UNIT TESTS JOB =====
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    needs: validate

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16, 18, 20]
        exclude:
          # Skip some combinations to save resources
          - os: macos-latest
            node-version: 16
          - os: windows-latest
            node-version: 16

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit -- --ci --coverage --watchAll=false

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: unit-tests-${{ matrix.os }}-node${{ matrix.node-version }}

  # ===== INTEGRATION TESTS JOB =====
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: validate

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: TestPassword123!
          ACCEPT_EULA: Y
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123! -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for SQL Server
        run: sleep 30

      - name: Setup test database
        run: |
          npm run setup-db
        env:
          MSSQL_SERVER: localhost
          MSSQL_PASSWORD: TestPassword123!
          MSSQL_USER: sa

      - name: Run integration tests
        run: npm run test:integration -- --ci --watchAll=false
        env:
          MSSQL_SERVER: localhost
          MSSQL_PASSWORD: TestPassword123!
          MSSQL_USER: sa

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            test-reports/
            coverage/

  # ===== FRONTEND TESTS JOB =====
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm run test:frontend -- --ci --watchAll=false

      - name: Upload frontend test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-results
          path: coverage/

  # ===== E2E TESTS JOB =====
  e2e-tests:
    name: End-to-End Tests
    runs-on: ${{ matrix.os }}
    needs: [unit-tests, integration-tests]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Run E2E tests (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: xvfb-run -a npm run test:e2e -- --ci --watchAll=false

      - name: Run E2E tests (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run test:e2e -- --ci --watchAll=false

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results-${{ matrix.os }}
          path: |
            test-reports/
            screenshots/
            coverage/

  # ===== PERFORMANCE TESTS JOB =====
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[performance]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test:performance -- --ci --watchAll=false

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: test-reports/

  # ===== BUILD VERIFICATION JOB =====
  build-verification:
    name: Build Verification
    runs-on: ${{ matrix.os }}
    needs: [unit-tests, integration-tests]

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  # ===== SECURITY AUDIT JOB =====
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for known vulnerabilities
        run: npx audit-ci --moderate

  # ===== COMPREHENSIVE TEST REPORT JOB =====
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, frontend-tests, e2e-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./test-artifacts

      - name: Generate comprehensive report
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          
          const artifacts = './test-artifacts';
          const report = {
            timestamp: new Date().toISOString(),
            workflow: {
              run_id: '${{ github.run_id }}',
              run_number: '${{ github.run_number }}',
              sha: '${{ github.sha }}',
              ref: '${{ github.ref }}'
            },
            results: {}
          };
          
          // Sammle alle Test-Ergebnisse
          if (fs.existsSync(artifacts)) {
            const dirs = fs.readdirSync(artifacts);
            dirs.forEach(dir => {
              const dirPath = path.join(artifacts, dir);
              if (fs.statSync(dirPath).isDirectory()) {
                report.results[dir] = 'completed';
              }
            });
          }
          
          fs.writeFileSync('comprehensive-test-report.json', JSON.stringify(report, null, 2));
          "

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-test-report
          path: comprehensive-test-report.json

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Lade Test-Report
            let report = {};
            try {
              report = JSON.parse(fs.readFileSync('comprehensive-test-report.json', 'utf8'));
            } catch (e) {
              report = { results: {}, error: 'Could not load test report' };
            }
            
            // Erstelle Kommentar
            const testResults = Object.keys(report.results);
            const passed = testResults.length;
            
            const comment = `
            ## 🧪 Test Results
            
            **Tests completed:** ${passed} test suites
            
            ${testResults.map(test => `- ✅ ${test}`).join('\n')}
            
            **Workflow:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Commit:** ${{ github.sha }}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ===== NOTIFICATION JOB =====
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, frontend-tests, e2e-tests, build-verification]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')

    steps:
      - name: Notify on failure
        if: contains(needs.*.result, 'failure')
        run: |
          echo "🚨 Some tests failed on main branch!"
          echo "Please check the test results and fix any issues."
          # Hier könnte eine Slack/Teams-Benachrichtigung integriert werden

      - name: Notify on success
        if: ${{ !contains(needs.*.result, 'failure') }}
        run: |
          echo "✅ All tests passed successfully!"
          echo "The application is ready for deployment."